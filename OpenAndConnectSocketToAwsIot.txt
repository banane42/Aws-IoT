My steps for using the Seeed Wio LTE CAT M1 / NB-IoT to connect to Aws IoT.

This board uses a UBlox SARA-R410M-02B modem to connect via cellular at commands to Aws IoT using MQTT version 3.1.1

To input AT commands use the AT_Bypass.ino provided by Seeed. https://github.com/Seeed-Studio/WioLTE_Cat_NB1_Arduino_Library

Commands can be referenced in the ublox documentation. https://www.u-blox.com/sites/default/files/SARA-R4-SARA-N4_ATCommands_%28UBX-17003787%29.pdf

MQTT documentation: http://www.redbooks.ibm.com/redbooks/pdfs/sg248054.pdf

Begin commands to connect to aws iot. Text prefaced by // is just comments and should not be typed in
---------------------------------------------------------------------------------
Perform this section for each board once if it has never been done before.

at+urat=7									//Selects which band to search for.
OK

at+usecmng=0,0,"Root_Cert",####							//Uploading your certs to the modem, the "" is the name you want the cert to be,
>-----BEGIN CERT								//#### is the size in bytes of the cert. After inputing the command, paste the 
OK										//cert in. There is a weird thing where after inputing each cert successfully you 
										//must restart the device to continue inputing other certs.
at+usecmng=0,1,"Client_Cert",####
>-----BEGIN CERTIFICATION
OK

at+usecmng=0,2,"Private_Key",####
>-----BEGIN RSA
OK
---------------------------------------------------------------------------------
at+udconf=1,1									//Enables hex mode
OK
at+usecprf=0,0,0								//certificate validation level. For some reason only 0,0,0 makes a successful connection. But we need a 0,0,1 connection
OK
at+usecprf=0,4,"ah2fpu2q2t4m4-ats.iot.us-east-1.amazonaws.com"			//!!!!! only use this if the certificate validation level is 2 or higher.!!!!!!!
OK										//Otherwise skip this step
at+usecprf=0,1,0								//SSL/TLS version. Connects with 0,1,0 but we want 0,1,3
OK
at+usecprf=0,2,0								//setting cipher suit
OK
at+usecmng=3									//displaying the current available certs with their type, Name, other name, and expiration. 
"CA","Root_Cert","Amazon Root CA 1","2038/01/17 00:00:00"			//Not necessary to run but it is useful. Add new certs using the usecmng command. 
"CC","Client_Cert","AWS IoT Certificate","2049/12/31 23:59:59"			//Look it up in the ublox documentation and above to see how to use it. 
"PK","Private_Key"								//Certs are obtained from the Aws IoT manager
OK
at+usecprf=0,3,"Root_Cert"							//setting the trusted root cert by the internal name. This is why you display the available cert names.
OK
at+usecprf=0,5,"Client_Cert"							//setting the client cert
OK
at+usecprf=0,6,"Private_Key"							//setting the client private key
OK
at+usocr=6									//Open Socket with protocol TCP
+USOCR: 0
OK
at+usosec=0,1,0									//Enable SSL/TLS on socket
OK
at+usoco=0,"ah2fpu2q2t4m4-ats.iot.us-east-1.amazonaws.com",8883			//Connect the socket to the server.
OK
at+usowr=0,29,"101B00064D51497364700302001E000D53656565642D57696F2D4C7465"	//Connect to the Aws MQTT server. The hex code will be different depending on the device.
+USOWR: 0,29

OK

+UUSORD: 0,4									//You do not type this in, this is a response from the server saying there is 4 bytest to read
										//on socket 0
at+usord=0,4									//Read 4 bytes on socket 4

+USORD: 0,4,"20020000"								//read a successful connack message
OK

The Guy's hex code. Forum post https://portal.u-blox.com/s/question/0D52p00008HKDunCAH/sarar4-to-amazon-iot-via-secure-mqtt?t=1557351106488
--------------------------------------------------------------------------------------------------------------------------------------------
10 1A 00 06 4D 51 49 73 64 70 03 02 00 02 00 10

Converted hex code from Mqtt documentation page 225
-------------------------------------------------------------------------------
10 18 00 06 4D 51 49 73 64 70 03 02 00 1E 00 0A 6C 6F 63 61 6C 47 68 6F 73 74

Our Hex code to connect to the server
---------------------------------------------------------------------------------------
10 1B 00 06 4D 51 49 73 64 70 03 02 00 1E 00 0D 53 65 65 65 64 2D 57 69 6F 2D 4C 74 65

Within our server connection hex code we need to replace the MQLSDP section with just MQTT
to match the version of MQTT that AWS is using(3.1.1)

Try to use the Legacy Root Cert to see if that will work.
